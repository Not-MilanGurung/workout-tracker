package beds.database;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.SQLException;

public class TableCreation {
    public static void main(String[] args) {
        if (DatabaseConnection.con == null){
			DatabaseConnection.main(args);
		}
        Connection con = DatabaseConnection.con;
        Statement stmt = null;
        int result = -1;
        // Creating the statement
		try{
			stmt = con.createStatement();

			// Creating table that stores the metric type of set of a exercise (weights, reps, etc)
			result = stmt.executeUpdate("CREATE TABLE MetricType ("+
					"MetricTypeID int PRIMARY KEY,"+ 
					"MetricType varchar(15) unique not null"+
					")");
				System.out.println(result);
					
			// Creating table that stores the string representing different muscle groups
			result = stmt.executeUpdate("CREATE TABLE MuscleGroup ("+
					"MuscleGroupID int PRIMARY KEY,"+ 
					"MuscleGroup varchar(15) unique not null"+
					")");
				System.out.println(result);

			// Creating table that stores the different equipment type
			result = stmt.executeUpdate("CREATE TABLE EquipmentType ("+
					"EquipmentID int PRIMARY KEY,"+ 
					"EquipmentType varchar(15) unique not null"+
					")");
				System.out.println(result);
				
				
				// Creating table that stores the different exercises that can be added to a workout
			// Missing reference to highest record sets
			result = stmt.executeUpdate("CREATE TABLE Exercises ("+
						"Id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1),"+
						"Name varchar(80) not null," +
						"MetricAType int not null,"+
						"MetricBType int," +
						"PrimaryMuscle int,"+ 
						"SecondaryMuscle int,"+
						"EquipmentType int,"+
						"RestTime time,"+
						"CONSTRAINT FK_MetricType_Exercises_MetricA FOREIGN KEY (MetricAType) references MetricType(MetricTypeID),"+
						"CONSTRAINT FK_MetricType_Exercises_MetricB FOREIGN KEY (MetricBType) references MetricType(MetricTypeID),"+
						"CONSTRAINT FK_MuscleGroup_Exercises_PrimaryMuscle FOREIGN KEY (PrimaryMuscle) references MuscleGroup(MuscleGroupID),"+
						"CONSTRAINT FK_MuscleGroup_Exercises_SecondaryMuscle FOREIGN KEY (SecondaryMuscle) references MuscleGroup(MuscleGroupID),"+
						"CONSTRAINT FK_EquipmentType FOREIGN KEY (EquipmentType) references EquipmentType(EquipmentID)"+
						")");
						System.out.println(result);

			result = stmt.executeUpdate("CREATE TABLE Workouts ("+
					"Id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1),"+
					"Name varchar(80) not null," +
					"CompletionTime Time not null,"+
					"DateTime DateTime not null,"+ 
					"IsRoutine BOOLEAN DEFAULT FALSE NOT NULL"+ 
					")");
					System.out.println(result);
					
			result = stmt.executeUpdate("CREATE TABLE WorkoutExercise ("+
					"Id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1),"+
					"WorkoutID INT,"+
					"ExerciseID INT NOT NULL," +
					"OrderNo INT,"+
					"CONSTRAINT FK_Workouts_WorkoutExercise FOREIGN KEY (WorkoutID) REFERENCES Workouts(Id),"+
					"CONSTRAINT FK_Exercises_WorkoutExercise FOREIGN KEY (ExerciseID) REFERENCES Exercises(Id),"+
					")");
					System.out.println(result);

			result = stmt.executeUpdate("CREATE TABLE SetType ("+
							"SetTypeID int PRIMARY KEY,"+ 
							"SetTypeType varchar(20) unique not null"+
							")");
						System.out.println(result);
					
			result = stmt.executeUpdate("CREATE TABLE Sets ("+
					"SetNo INT,"+
					"WorkoutExerciseID INT," +
					"MetricA INT NOT NULL,"+
					"MetricB INT,"+
					"SetType INT NOT NULL,"+
					"RestTime time,"+
					"CONSTRAINT PK_Sets PRIMARY KEY (WorkoutExerciseID, SetNo),"+
					"CONSTRAINT FK_WorkoutExercise_Sets FOREIGN KEY (WorkoutExerciseID) REFERENCES WorkoutExercise(Id),"+
					"CONSTRAINT FK_SetType_Sets FOREIGN KEY (SetType) REFERENCES SetType(SetTypeID)"+
					")");
					System.out.println(result);

			result = stmt.executeUpdate("CREATE TABLE Users ("+
					"UserID INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,"+
					"Username VARCHAR(200) UNIQUE," +
					"Hash VARCHAR(255) NOT NULL"+
					")");
					System.out.println(result);
			con.commit();
			con.close();
		}
		catch (SQLException e){
			e.printStackTrace(System.out);
		}
    }
}
